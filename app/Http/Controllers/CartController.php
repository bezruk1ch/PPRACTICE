<?php

// –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã –≤ Laravel

/**
 * –≠—Ç–∞–ø—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:
 * 1. –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã (–≤ —Å–µ—Å—Å–∏–∏ –¥–æ –≤—Ö–æ–¥–∞, –≤ –ë–î –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞).
 * 2. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ).
 * 3. –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –∏ —Å–µ—Ä–≤–µ—Ä–µ).
 * 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä (AJAX –∏–ª–∏ —Ñ–æ—Ä–º–∞).
 * 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –≤ orders –∏ order_items.
 */

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Order;
use App\Models\OrderItem;
use App\Models\Product;
use App\Models\ProductOption;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Mail;
use App\Mail\OrderCreatedMail;

class CartController extends Controller
{
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã.
     */
    public function index()
    {
        $cart     = session()->get('cart', []);
        $products = Product::with('options')->get();
        return view('layouts.pages.cart', compact('cart', 'products'));
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É (–≤ —Å–µ—Å—Å–∏—é).
     * –û–∂–∏–¥–∞–µ—Ç JSON:
     *  - project_name
     *  - project_data (—Å—Ç—Ä–æ–∫–∞ JSON —Å –∫–ª—é—á–∞–º–∏ template, preview, date)
     */
    public function add(Request $request)
    {
        $data = $request->validate([
            'project_name' => 'required|string|max:255',
            'project_data' => 'required|string',
        ]);

        $parsed = json_decode($data['project_data'], true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            return response()->json(['error' => '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON'], 422);
        }

        $cart = session()->get('cart', []);

        $cart[] = [
            'name'     => $data['project_name'],
            'template' => $parsed['template'] ?? null,
            'preview'  => $parsed['preview']  ?? null,
            'date'     => now()->format('d.m.Y H:i'),
        ];

        session(['cart' => $cart]);

        return response()->json(['success' => true]);
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É (—Å–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é).
     */
    public function clear(Request $request)
    {
        session()->forget('cart');
        return redirect()->route('cart')
            ->with('success', '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.');
    }

    /**
     * –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑: –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å—ë –∏–∑ —Å–µ—Å—Å–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—ã orders –∏ order_items.
     */
    public function checkout(Request $request)
    {
        /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1. –í–ê–õ–ò–î–ê–¶–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
        $data = $request->validate([
            // –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è
            'shipping_type'    => 'required|in:delivery,pickup',
            // –∞–¥—Ä–µ—Å –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ delivery
            'shipping_address' => 'required_if:shipping_type,delivery|string|max:255',
            // –æ–ø–ª–∞—Ç–∞
            'payment_method'   => 'required|in:cash,card,online',
            // –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            'comment'          => 'nullable|string|max:500',

            // –º–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Ñ–æ—Ä–º—ã
            'items'                => 'required|array',
            'items.*.quantity'     => 'required|integer|min:1',
            'items.*.options'      => 'array',
            'items.*.options.*'    => 'string|max:100',

        ]);

        /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2. –ü–†–û–í–ï–†–ö–ê –ö–û–†–ó–ò–ù–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
        $cart = session()->get('cart', []);
        if (empty($cart)) {
            return redirect()->route('cart')
                ->with('order_error', '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.');
        }

        $itemsData = $data['items'];   // –≤—Å—ë —Ç–æ –∂–µ, —Ç–æ–ª—å–∫–æ –±–µ—Ä—ë–º –∏–∑ $data
        $user = Auth::user();

        try {
            /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3. –°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
            $order = Order::create([
                'user_id'          => Auth::id() ?: null,
                'status'           => 'new',
                'total_price'      => 0,                   // –æ–±–Ω–æ–≤–∏–º –Ω–∏–∂–µ
                'shipping_type'    => $data['shipping_type'],
                'shipping_address' => $data['shipping_address'] ?? null,
                'payment_method'   => $data['payment_method'],
                'comment'          => $data['comment']     ?? null,
                'customer_name'    => $user->name,
                'customer_email'   => $user->email,
                'customer_phone'   => $user->phone ?? '',
            ]);

            $totalSum = 0;

            /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 4. –ü–ï–†–ï–ù–û–° –ü–û–ó–ò–¶–ò–ô ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
            foreach ($cart as $index => $item) {
                $type    = $item['template']['type'] ?? null;
                $product = Product::where('type', $type)->with('options')->first();
                if (!$product) continue;

                $basePrice = $product->base_price ?? 0;
                $quantity  = (int)($itemsData[$index]['quantity'] ?? 1);
                $options   = $itemsData[$index]['options'] ?? [];

                // –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞—Ü–µ–Ω–∫–∏
                $modifiers = 0;
                foreach ($options as $optType => $optValue) {
                    $opt = $product->options
                        ->where('option_type', $optType)
                        ->where('option_name', $optValue)
                        ->first();
                    $modifiers += $opt?->price_modifier ?? 0;
                }

                $pricePerItem = $basePrice + $modifiers;
                $subtotal     = $pricePerItem * $quantity;
                $totalSum    += $subtotal;

                OrderItem::create([
                    'order_id'       => $order->id,
                    'project_name'   => $item['name'],
                    'product_type'   => $type,
                    'parameters'     => json_encode($options, JSON_UNESCAPED_UNICODE),
                    'quantity'       => $quantity,
                    'price_per_item' => $pricePerItem,
                ]);
            }

            /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 5. –ò–¢–û–ì–û ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
            $order->update(['total_price' => $totalSum]);

            session()->forget('cart');

            return redirect()->route('cart')
                ->with('order_success', "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {$order->customer_email}");
        } catch (\Throwable $e) {
            report($e);
            return redirect()->route('cart')->with('order_error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    }
}
